datasource db {
  provider = "mongodb"
  url      = env("MONGO_CONNECTION_STRING")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

generator pothos {
  provider = "prisma-pothos-types"
  output   = "./generated.d.ts"
}

model User {
  id            String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  login         String   @unique
  passwordHash  String
  players       Player[]
  currentGameId String?  @db.ObjectId
  currentGame   Game?    @relation(name: "currentGame", fields: [currentGameId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdGames  Game[]   @relation("ownerGame")
}

model Player {
  id                          String                  @id @default(dbgenerated()) @map("_id") @db.ObjectId
  userId                      String?                 @db.ObjectId
  user                        User?                   @relation(fields: [userId], references: [id])
  role                        RoleType
  teamId                      String?                 @db.ObjectId
  team                        Team?                   @relation(fields: [teamId], references: [id])
  guestTeamRoomId             String?                 @unique @db.ObjectId
  guestTeamRoom               TeamRoom?               @relation(fields: [guestTeamRoomId], references: [id])
  economicDepositActions      EconomicDepositAction[]
  shieldCreationActionActions ShieldCreationAction[]
  sendBombActions             SendBombAction[]
  createBombActions           CreateBombAction[]
  sendDiplomatActions         SendDiplomatAction[]
}

enum RoleType {
  PRESIDENT
  DIPLOMAT
}

enum Nation {
  RUSSIA
  UKRAINE
  USA
  CHINA
}

model Team {
  id                         String               @id @default(dbgenerated()) @map("_id") @db.ObjectId
  players                    Player[]
  nation                     Nation
  money                      Int
  maxPlayersCount            Int
  maxBombCount               Int
  gameId                     String               @db.ObjectId
  game                       Game                 @relation(fields: [gameId], references: [id])
  teamRoom                   TeamRoom?
  sendBombActions            SendBombAction[]
  createBombActions          CreateBombAction[]
  sendDiplomatActions        SendDiplomatAction[] @relation("sender")
  destinationDiplomatActions SendDiplomatAction[] @relation("destination")
}

enum GameStatus {
  ON_GOING
  NOT_STARTED
  ENDED
}

model Game {
  id           String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name         String
  ownerId      String     @unique @db.ObjectId
  owner        User       @relation(name: "ownerGame", fields: [ownerId], references: [id])
  status       GameStatus @default(NOT_STARTED)
  currentRound Int
  ecologyValue Int
  clients      User[]     @relation("currentGame")
  teams        Team[]
  rounds       Round[]
}

model Round {
  id                          String                  @id @default(dbgenerated()) @map("_id") @db.ObjectId
  currentStage                Int
  order                       Int
  stages                      Stage[]
  gameId                      String                  @db.ObjectId
  game                        Game                    @relation(fields: [gameId], references: [id])
  economicDepositActions      EconomicDepositAction[]
  shieldCreationActionActions ShieldCreationAction[]
  sendBombActions             SendBombAction[]
  createBombActions           CreateBombAction[]
  sendDiplomatActions         SendDiplomatAction[]
}

model Stage {
  id       String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  order    Int
  livetime Int
  roundId  String @db.ObjectId
  round    Round  @relation(fields: [roundId], references: [id])
}

model TeamRoom {
  id     String  @id @default(dbgenerated()) @map("_id") @db.ObjectId
  teamId String  @unique @db.ObjectId
  team   Team    @relation(fields: [teamId], references: [id])
  guest  Player?
}

model Town {
  id                     String                  @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name                   String
  townLevelId            String                  @db.ObjectId
  townLevel              TownLevel               @relation(fields: [townLevelId], references: [id])
  shield                 Boolean
  destroyed              Boolean
  economicDepositActions EconomicDepositAction[]
  shieldCreationActions  ShieldCreationAction[]
  sendBombActions        SendBombAction[]
}

model TownLevel {
  id             String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  order          Int
  incomePerRound Int
  upgradeCost    Int
  livingLevel    Int
  towns          Town[]
}

model EconomicDepositAction {
  id       String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  townId   String @db.ObjectId
  town     Town   @relation(fields: [townId], references: [id])
  roundId  String @db.ObjectId
  round    Round  @relation(fields: [roundId], references: [id])
  playerId String @db.ObjectId
  player   Player @relation(fields: [playerId], references: [id])
}

model ShieldCreationAction {
  id       String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  townId   String @db.ObjectId
  town     Town   @relation(fields: [townId], references: [id])
  roundId  String @db.ObjectId
  round    Round  @relation(fields: [roundId], references: [id])
  playerId String @db.ObjectId
  player   Player @relation(fields: [playerId], references: [id])
}

model SendBombAction {
  id       String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  senderId String @db.ObjectId
  sender   Team   @relation(fields: [townId], references: [id])
  townId   String @db.ObjectId
  town     Town   @relation(fields: [townId], references: [id])
  roundId  String @db.ObjectId
  round    Round  @relation(fields: [roundId], references: [id])
  playerId String @db.ObjectId
  player   Player @relation(fields: [playerId], references: [id])
}

model CreateBombAction {
  id        String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  creatorId String @db.ObjectId
  creator   Team   @relation(fields: [creatorId], references: [id])
  roundId   String @db.ObjectId
  round     Round  @relation(fields: [roundId], references: [id])
  playerId  String @db.ObjectId
  player    Player @relation(fields: [playerId], references: [id])
}

model SendDiplomatAction {
  id            String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  senderId      String @db.ObjectId
  sender        Team   @relation(name: "sender", fields: [senderId], references: [id])
  destinationId String @db.ObjectId
  destination   Team   @relation(name: "destination", fields: [destinationId], references: [id])
  roundId       String @db.ObjectId
  round         Round  @relation(fields: [roundId], references: [id])
  playerId      String @db.ObjectId
  player        Player @relation(fields: [playerId], references: [id])
}
