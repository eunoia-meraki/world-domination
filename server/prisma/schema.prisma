datasource db {
  provider = "mongodb"
  url      = env("MONGO_CONNECTION_STRING")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

generator pothos {
  provider = "prisma-pothos-types"
  output   = "./generated.d.ts"
}

model User {
  id            String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  login         String   @unique
  passwordHash  String
  players       Player[]
  currentGameId String?  @db.ObjectId
  currentGame   Game?    @relation(name: "currentGame", fields: [currentGameId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdGames  Game[]   @relation("ownerGame")
}

model Player {
  id              String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  userId          String?   @db.ObjectId
  user            User?     @relation(fields: [userId], references: [id])
  role            RoleType
  teamId          String?   @db.ObjectId
  team            Team?     @relation(fields: [teamId], references: [id])
  guestTeamRoomId String?   @unique @db.ObjectId
  guestTeamRoom   TeamRoom? @relation(fields: [guestTeamRoomId], references: [id])
}

enum RoleType {
  PRESIDENT
  DIPLOMAT
}

enum Nation {
  RUSSIA
  UKRAINE
  USA
  CHINA
}

model Team {
  id                   String             @id @default(dbgenerated()) @map("_id") @db.ObjectId
  players              Player[]
  nation               Nation
  hasNuclearTechnology Boolean            @default(false)
  money                Int
  maxPlayersCount      Int
  maxBombCount         Int
  gameId               String             @db.ObjectId
  game                 Game               @relation(fields: [gameId], references: [id])
  towns                Town[]
  teamRoom             TeamRoom?
  sendBombActions      SendBombAction[]
  createBombActions    CreateBombAction[]
  sanctionActions      SanctionAction[]
  actions              GameAction[]
}

enum GameStatus {
  NOT_STARTED
  ON_STARTING
  ON_GOING
  ENDED
}

model Game {
  id           String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name         String
  ownerId      String     @unique @db.ObjectId
  owner        User       @relation(name: "ownerGame", fields: [ownerId], references: [id])
  status       GameStatus @default(NOT_STARTED)
  currentRound Int        @default(0)
  ecologyValue Int
  clients      User[]     @relation("currentGame")
  teams        Team[]
  rounds       Round[]
}

model Round {
  id           String       @id @default(dbgenerated()) @map("_id") @db.ObjectId
  currentStage Int
  order        Int
  stages       Stage[]
  gameId       String       @db.ObjectId
  game         Game         @relation(fields: [gameId], references: [id])
  actions      GameAction[]
}

model Stage {
  id       String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  order    Int
  livetime Int
  roundId  String @db.ObjectId
  round    Round  @relation(fields: [roundId], references: [id])
}

model TeamRoom {
  id     String  @id @default(dbgenerated()) @map("_id") @db.ObjectId
  teamId String  @unique @db.ObjectId
  team   Team    @relation(fields: [teamId], references: [id])
  guest  Player?
}

model Town {
  id                    String                 @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name                  String
  townLevelId           String                 @db.ObjectId
  townLevel             TownLevel              @relation(fields: [townLevelId], references: [id])
  shield                Boolean
  destroyed             Boolean
  investTownActions     InvestTownAction[]
  shieldCreationActions ShieldCreationAction[]
  sendBombActions       SendBombAction[]
  team                  Team?                  @relation(fields: [teamId], references: [id])
  teamId                String?                @db.ObjectId
}

model TownLevel {
  id             String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  order          Int
  incomePerRound Int
  upgradeCost    Int
  livingLevel    Int
  towns          Town[]
}

enum GameActionType {
  INVEST_TOWN 
  SHILED_CREATION
  SEND_BOMB
  CREATE_BOMB
  ECOLOGY_DEPOSIT
  DEVELOP_NUCLEAR_TECHNOLOGY
  SANCTION
}

model GameAction {
  id                             String                          @id @default(dbgenerated()) @map("_id") @db.ObjectId
  type                           GameActionType
  roundId                        String                          @db.ObjectId
  round                          Round                           @relation(fields: [roundId], references: [id])
  teamId                         String                          @unique @db.ObjectId
  team                           Team                            @relation(fields: [teamId], references: [id])
  investTownAction               InvestTownAction?
  shieldCreationAction           ShieldCreationAction?
  sendBombAction                 SendBombAction?
  createBombAction               CreateBombAction?
  ecologyDepositAction           EcologyDepositAction?
  developNuclearTechnologyAction DevelopNuclearTechnologyAction?
  sanctionAction                 SanctionAction?
}

model InvestTownAction {
  id       String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  townId   String     @db.ObjectId
  town     Town       @relation(fields: [townId], references: [id])
  actionId String     @unique @db.ObjectId
  action   GameAction @relation(fields: [actionId], references: [id])
}

model ShieldCreationAction {
  id       String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  townId   String     @db.ObjectId
  town     Town       @relation(fields: [townId], references: [id])
  actionId String     @unique @db.ObjectId
  action   GameAction @relation(fields: [actionId], references: [id])
}

model SendBombAction {
  id       String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  senderId String     @db.ObjectId
  sender   Team       @relation(fields: [senderId], references: [id])
  townId   String     @db.ObjectId
  town     Town       @relation(fields: [townId], references: [id])
  actionId String     @unique @db.ObjectId
  action   GameAction @relation(fields: [actionId], references: [id])
}

model CreateBombAction {
  id        String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  count     Int
  creatorId String     @db.ObjectId
  creator   Team       @relation(fields: [creatorId], references: [id])
  actionId  String     @unique @db.ObjectId
  action    GameAction @relation(fields: [actionId], references: [id])
}

model EcologyDepositAction {
  id       String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  actionId String     @unique @db.ObjectId
  action   GameAction @relation(fields: [actionId], references: [id])
}

model DevelopNuclearTechnologyAction {
  id       String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  actionId String     @unique @db.ObjectId
  action   GameAction @relation(fields: [actionId], references: [id])
}

model SanctionAction {
  id       String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  actionId String     @unique @db.ObjectId
  action   GameAction @relation(fields: [actionId], references: [id])
  victimId String     @unique @db.ObjectId
  victim   Team       @relation(fields: [victimId], references: [id])
}
