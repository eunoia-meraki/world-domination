"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type ActionEvent {
  actionType: ActionType!
  data: String!
}

enum ActionType {
  ADD_PEER
  ICE_CANDIDATE
  JOIN
  LEAVE
  RELAY_ICE
  RELAY_SDP
  REMOVE_PEER
  SESSION_DESCRIPTION
  SHARE_ROOMS
}

type CreateBombAction implements Node {
  creator: Team!
  id: ID!
  player: Player!
  round: Round!
}

type EconomicDepositAction implements Node {
  id: ID!
  player: Player!
  round: Round!
  town: Town!
}

type Game implements Node {
  clients: [User!]!
  currentRound: Int!
  ecologyValue: Int!
  id: ID!
  name: String!
  owner: User!
  rounds: [Round!]!
  status: GameStatus!
  teams: [Team!]!
}

enum GameStatus {
  ENDED
  NOT_STARTED
  ON_GOING
}

type Mutation {
  createGame(gameName: String!): Game!
  interactWebRTC(login: String!, password: String!): Boolean!
  signIn(login: String!, password: String!): SignInPayload!
  signUp(login: String!, password: String!): String!
}

enum Nation {
  CHINA
  RUSSIA
  UKRAINE
  USA
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Player implements Node {
  createBombActions: [CreateBombAction!]!
  economicDepositActions: [EconomicDepositAction!]!
  id: ID!
  roles: RoleType!
  sendBombActions: [SendBombAction!]!
  sendDiplomatActions: [SendDiplomatAction!]!
  shieldCreationActionActions: [ShieldCreationAction!]!
  users: User!
}

type Query {
  games(after: String, before: String, first: Int, last: Int): QueryGamesConnection!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  users(after: String, before: String, first: Int, last: Int): QueryUsersConnection!
}

type QueryGamesConnection {
  edges: [QueryGamesConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryGamesConnectionEdge {
  cursor: String!
  node: Game!
}

type QueryUsersConnection {
  edges: [QueryUsersConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryUsersConnectionEdge {
  cursor: String!
  node: User!
}

enum RoleType {
  DIPLOMAT
  PRESIDENT
}

type Round implements Node {
  createBombActions: [CreateBombAction!]!
  currentStage: Int!
  economicDepositActions: [EconomicDepositAction!]!
  game: Game!
  id: ID!
  order: Int!
  sendBombActions: [SendBombAction!]!
  sendDiplomatActions: [SendDiplomatAction!]!
  shieldCreationActionActions: [ShieldCreationAction!]!
  stages: [Stage!]!
}

type SendBombAction implements Node {
  id: ID!
  player: Player!
  round: Round!
  sender: Team!
  town: Town!
}

type SendDiplomatAction implements Node {
  destination: Team!
  id: ID!
  player: Player!
  round: Round!
  sender: Team!
}

type ShieldCreationAction implements Node {
  id: ID!
  player: Player!
  round: Round!
  town: Town!
}

type SignInPayload {
  id: String!
  token: String!
}

type Stage implements Node {
  id: ID!
  livetime: Int!
  order: Int!
  round: Round!
}

type Subscription {
  webRTC: ActionEvent!
}

type Team implements Node {
  createBombActions: [CreateBombAction!]!
  destinationDiplomatActions: [SendDiplomatAction!]!
  game: Game!
  id: ID!
  maxBombCount: Int!
  maxPlayersCount: Int!
  money: Int!
  nation: Nation!
  players: [Player!]!
  sendBombActions: [SendBombAction!]!
  sendDiplomatActions: [SendDiplomatAction!]!
  teamRoom: TeamRoom!
}

type TeamRoom implements Node {
  gues: Player!
  id: ID!
  team: Team!
}

type Town implements Node {
  destroyed: Boolean!
  economicDepositActions: [EconomicDepositAction!]!
  id: ID!
  name: String!
  sendBombActions: [SendBombAction!]!
  shield: Boolean!
  shieldCreationActions: [ShieldCreationAction!]!
  townLevel: TownLevel!
}

type TownLevel implements Node {
  id: ID!
  incomePerRound: Int!
  livingLevel: Int!
  order: Int!
  towns: [Town!]!
  upgradeCost: Int!
}

type User implements Node {
  id: ID!
  login: String!
  passwordHash: String!
  players: [Player!]!
}

