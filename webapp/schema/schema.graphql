"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type AuthorizationPayload {
  token: String!
  user: User!
}

type CreateBombAction implements Node {
  action: GameAction!
  creator: Team!
  id: ID!
}

type DevelopNuclearTechnologyAction implements Node {
  id: ID!
}

type EcologyDepositAction implements Node {
  id: ID!
}

type Game implements Node {
  clients: [User!]!
  currentRound: Int!
  ecologyValue: Int!
  id: ID!
  name: String!
  owner: User!
  rounds: [Round!]!
  status: GameStatus!
  teams: [Team!]!
}

type GameAction implements Node {
  createBombAction: CreateBombAction!
  developNuclearTechnologyAction: DevelopNuclearTechnologyAction!
  ecologyDepositAction: EcologyDepositAction!
  economicDepositAction: InvestTownAction!
  id: ID!
  round: Round!
  sanctionsAction: SanctionAction!
  sendBombAction: SendBombAction!
  shieldCreationAction: ShieldCreationAction!
  team: Team!
  type: GameActionType!
}

enum GameActionType {
  CREATE_BOMB
  DEVELOP_NUCLEAR_TECHNOLOGY
  ECOLOGY_DEPOSIT
  INVEST_TOWN
  SANCTION
  SEND_BOMB
  SHILED_CREATION
}

enum GameStatus {
  ENDED
  NOT_STARTED
  ON_GOING
}

type InvestTownAction implements Node {
  action: GameAction!
  id: ID!
  town: Town!
}

type Mutation {
  createGame(gameName: String!): Game!
  interactWebRTC(actionType: WebRTCActionType!, data: String!): Boolean!
  joinGame(gameId: ID!): User!
  leaveGame: User!
  sendActions(input: SendActionsInput!): Boolean!
  signIn(login: String!, password: String!): AuthorizationPayload!
  signUp(login: String!, password: String!): AuthorizationPayload!
}

enum Nation {
  CHINA
  RUSSIA
  UKRAINE
  USA
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Player implements Node {
  id: ID!
  roles: RoleType!
  users: User!
}

type Query {
  authorizedUser: User!
  games(after: String, before: String, first: Int, last: Int): QueryGamesConnection!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  users(after: String, before: String, first: Int, last: Int): QueryUsersConnection!
}

type QueryGamesConnection {
  edges: [QueryGamesConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryGamesConnectionEdge {
  cursor: String!
  node: Game!
}

type QueryUsersConnection {
  edges: [QueryUsersConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryUsersConnectionEdge {
  cursor: String!
  node: User!
}

enum RoleType {
  DIPLOMAT
  PRESIDENT
}

type Round implements Node {
  actions: [GameAction!]!
  currentStage: Int!
  game: Game!
  id: ID!
  order: Int!
  stages: [Stage!]!
}

type SanctionAction implements Node {
  action: GameAction!
  id: ID!
  victim: Team!
}

input SendActionsInput {
  createBombsCount: Int!
  developNuclearTechnologyAction: Boolean!
  gameId: String!
  implementEnvironmentalProgram: Boolean!
  investTownsIds: [String!]!
  sanctionsTeamIds: [String!]!
  sendBombsTownsIds: [String!]!
  shieldTownsIds: [String!]!
  teamId: String!
}

type SendBombAction implements Node {
  action: GameAction!
  id: ID!
  sender: Team!
  town: Town!
}

type ShieldCreationAction implements Node {
  action: GameAction!
  id: ID!
  town: Town!
}

type Stage implements Node {
  id: ID!
  livetime: Int!
  order: Int!
  round: Round!
}

type Subscription {
  gameSubscription: Game!
  webRTC(roomId: String!): WebRTCActionEvent!
}

type Team implements Node {
  actions: [GameAction!]!
  createBombActions: [CreateBombAction!]!
  game: Game!
  hasNuclearTechnology: Boolean!
  id: ID!
  maxBombCount: Int!
  maxPlayersCount: Int!
  money: Int!
  nation: Nation!
  players: [Player!]!
  sanctionsActions: [SanctionAction!]!
  sendBombActions: [SendBombAction!]!
  teamRoom: TeamRoom!
  towns: [Town!]!
}

type TeamRoom implements Node {
  gues: Player!
  id: ID!
  team: Team!
}

type Town implements Node {
  destroyed: Boolean!
  id: ID!
  investTownActions: [InvestTownAction!]!
  name: String!
  sendBombActions: [SendBombAction!]!
  shield: Boolean!
  shieldCreationActions: [ShieldCreationAction!]!
  team: Team!
  townLevel: TownLevel!
}

type TownLevel implements Node {
  id: ID!
  incomePerRound: Int!
  livingLevel: Int!
  order: Int!
  towns: [Town!]!
  upgradeCost: Int!
}

type User implements Node {
  availableGames(after: String, before: String, first: Int, last: Int): UserAvailableGamesConnection!
  currentGame: Game
  id: ID!
  login: String!
}

type UserAvailableGamesConnection {
  edges: [UserAvailableGamesConnectionEdge]!
  pageInfo: PageInfo!
}

type UserAvailableGamesConnectionEdge {
  cursor: String!
  node: Game!
}

type WebRTCActionEvent {
  actionType: WebRTCActionType!
  data: String!
}

enum WebRTCActionType {
  ADD_PEER
  ICE_CANDIDATE
  JOIN
  LEAVE
  RELAY_ICE
  RELAY_SDP
  REMOVE_PEER
  SESSION_DESCRIPTION
}

